@page "/"
@using HansensTodo.Models;
@using System.Security.Cryptography;
@inject NavigationManager _navigationManager;
@inject Repo.TodoRepo _context;
@inject Repo.HashRepo _hashContext;
@inject Codes.Encryption _encryption;

<PageTitle>Index</PageTitle>

<div class="row">
    <div class="col-md-8">
        <table class="table table-primary table-striped">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Title</th>
                    <th scope="col">Stack Size</th>
                    <th scope="col">Item Price</th>
                    <th scope="col">Total Price</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in todolist)
                {
                    <tr>
                        <td class="align-content-center">@item.Id</td>
                        <td class="align-content-center">@item.TodoTitle</td>
                        <td class="align-content-center">@item.StackSize</td>
                        <td class="align-content-center">@item.Price Kr.</td>
                        <td class="align-content-center">@TotalPrice(item.StackSize, item.Price) Kr.</td>
                        <td>
                            <a href="">Edit</a>
                            <a href="">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-md-4">
        @if(count == 0)
        {
            <span class="d-flex flex-md-wrap alert alert-success">
                There is no data for your TodoList. Please click on the button to create data
            </span>
            <button @onclick="CreateData" class="btn btn-success">Create TodoData</button>   
        } else
        {
            @if (!isValid)
            {
                <span class="d-flex flex-md-wrap alert alert-danger">There is an update to your Todolist Please click on update to verify the update</span>
                <button @onclick="UpdateData" class="btn btn-success">Update TodoData</button>
            }
        }

    </div>
</div>

@code{
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }

    public string UserEmailID = "";
    public List<Todo> todolist;
    public string newHash { get; set; }
    public string oldHash { get; set; }
    public int count { get; set; }
    public bool isValid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        todolist = new List<Todo>();
        var authState = await authenticationStateTask;
        var user = authState.User;
        if(user.Identity != null)
        {
            if(!user.Identity.IsAuthenticated)
                _navigationManager.NavigateTo("Identity/Account/Login");
        }
        UserEmailID = user.Identity.Name;

        await GetData();

        CheckForEmptyTable(UserEmailID);
        Task.Run(async() => await OldHash());
        newHash = HashedTodoListData(todolist);

        Task.Run(() => isValid = VerifyData(oldHash, newHash));
    }

    public async Task GetData()
    {
        List<Todo> ItemList = await _context.GetAllItem(UserEmailID);
        todolist = ItemList.Select(obj => new Todo
            {
                Id = obj.Id,
                TodoTitle = _encryption.UnProtect(obj.TodoTitle),
                StackSize = obj.StackSize,
                Price = obj.Price
            }).ToList();
    }

    public int TotalPrice(int _stacksize, int _price)
    {
        int result = _stacksize * _price;
        return result;
    }

    public string HashedTodoListData(List<Todo> _todo)
    {
        string HashedData = BCrypt.Net.BCrypt.HashPassword(string.Join(',', _todo));
        return HashedData;        
    }

    public async Task OldHash()
    {
        Hashed item = await _hashContext.GetHash(UserEmailID);
        oldHash = item.HashedData;
        //todolist.Add(new Todo() { TodoTitle = _encryption.Protect("Angreb"), StackSize = 25, Price = 15, UserEmailId = UserEmailID });
        
    }

    public bool VerifyData(string _oldHash, string _newHash)
    {
        return BCrypt.Net.BCrypt.Verify(_oldHash, _newHash);
    }

    public async Task<Hashed> UpdateData()
    {
        Hashed item = new Hashed()
            {
                UserEmailId = UserEmailID,
                HashedData = newHash
            };

        await _hashContext.UpdateHash(item);
        return null;
    }

    public void CheckForEmptyTable(string _userEmailId)
    {
        count = _hashContext.CheckIfEmpty(_userEmailId);
    }

    public async Task CreateData()
    {
        try {
        Hashed item = new Hashed()
            {
                UserEmailId = UserEmailID,
                HashedData = newHash
            };
        await _hashContext.Create(item);

        } catch (Exception ex)
        {
            string message = ex.Message;
        }
    }

    
}

