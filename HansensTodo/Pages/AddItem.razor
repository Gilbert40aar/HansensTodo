@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject Codes.Encryption _encryption
@inject Repo.TodoRepo _context
@inject NavigationManager _navigationManager
@using HansensTodo.Models
@attribute [Authorize(Policy = "RequireAuthUser")]
@page "/additem"
<h3>AddItem</h3>
<div class="row">
    <div class="col-md-8">
        <div class="form-group">
            <label>Title</label>
            <input type="text" @bind="TodoTitle" name="" class="form-control" />
        </div>
        <div class="form-group">
            <label>Stack Size</label>
            <input type="text" @bind="StackSize" name="" class="form-control" />
        </div>
        <div class="form-group">
            <label>Price</label>
            <input type="text" @bind="Price" name="" class="form-control" />
        </div>
        <div>
            <button class="btn btn-primary" type="submit" @onclick="handleValidSubmit">Save Item</button>
            <button class="btn btn-danger" type="reset">Clear All</button>
        </div>
    </div>
    <div class="col-md-4"></div>
</div>

@code {
    public string UserEmailID = "";
    public string TodoTitle { get; set; }
    public int StackSize { get; set; }
    public int Price { get; set; }

    private Todo todo = new Todo();
    protected async override Task OnInitializedAsync()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authState.User;
        UserEmailID = user.Identity.Name;
    }

    public async Task handleValidSubmit()
    {

        try
        {
            todo.UserEmailId = UserEmailID;
            todo.TodoTitle = _encryption.Protect(TodoTitle);
            todo.StackSize = StackSize;
            todo.Price = Price;
            await _context.CreateItem(todo);

        } catch (Exception ex)
        {
            string message = ex.Message;
        }
    }
}
