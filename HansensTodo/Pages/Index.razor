@page "/"
@using HansensTodo.Models;
@using System.Security.Cryptography;
@inject NavigationManager _navigationManager;
@inject Repo.TodoRepo _context;
@inject Codes.Encryption _encryption;

<PageTitle>Index</PageTitle>

<div class="row">
    <div class="col-md-8">
        <table class="table table-primary table-striped">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Title</th>
                    <th scope="col">Stack Size</th>
                    <th scope="col">Item Price</th>
                    <th scope="col">Total Price</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in todolist)
                {
                    <tr>
                        <td class="align-content-center">@item.Id</td>
                        <td class="align-content-center">@item.TodoTitle</td>
                        <td class="align-content-center">@item.StackSize</td>
                        <td class="align-content-center">@item.Price Kr.</td>
                        <td class="align-content-center">@TotalPrice(item.StackSize, item.Price) Kr.</td>
                        <td>
                            <a href="">Edit</a>
                            <a href="">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-md-4"></div>
</div>

@code{
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }

    public string UserEmailID = "";
    public List<Todo> todolist;

    protected override async Task OnInitializedAsync()
    {
        todolist = new List<Todo>();
        var authState = await authenticationStateTask;
        var user = authState.User;
        if(user.Identity != null)
        {
            if(!user.Identity.IsAuthenticated)
                _navigationManager.NavigateTo("Identity/Account/Login");
        }
        UserEmailID = user.Identity.Name;

        await GetData();
    }

    public async Task GetData()
    {
        List<Todo> ItemList = await _context.GetAllItem(UserEmailID);
        todolist = ItemList.Select(obj => new Todo
            {
                Id = obj.Id,
                TodoTitle = _encryption.UnProtect(obj.TodoTitle),
                StackSize = obj.StackSize,
                Price = obj.Price
            }).ToList();
    }

    public int TotalPrice(int _stacksize, int _price)
    {
        int result = _stacksize * _price;
        return result;
    }

    
}

